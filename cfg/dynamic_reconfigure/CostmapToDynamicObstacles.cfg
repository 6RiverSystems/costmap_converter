#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# For integers and doubles:
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max

##################################################################
###################### Foreground detection ######################
gen.add("alpha_slow", double_t, 0,
	"Learning rate of the slow filter for foreground detection",
	0.55, 0.0, 1.0)

gen.add("alpha_fast", double_t, 0,
	"Learning rate of the fast filter for foreground detection",
	0.95, 0.0, 1.0)

gen.add("beta", double_t, 0,
	"Wighting coefficient between a pixels value and the mean of its nearest neighbors",
	0.8, 0.0, 1.0)

gen.add("min_sep_between_slow_and_fast_filter", int_t, 0,
	"Minimal difference between the fast and the slow filter to recognize a obstacle as dynamic",
	80, 0, 255)

gen.add("min_occupancy_probability", int_t, 0,
	"Minimal value of the fast filter to recognize a obstacle as dynamic",
	180, 0, 255)

gen.add("max_occupancy_neighbors", int_t, 0,
	"Maximal mean value of the nearest neighbors of a pixel in the slow filter",
	80, 0, 255)

############################################################
###################### Blob detection ######################
gen.add("min_threshold", int_t, 0,
	"Minimal value of a pixel to be considered part of a blob",
	10, 0, 255)

gen.add("max_threshold", int_t, 0,
	"Maximal value of a pixel to be considered part of a blob",
	255, 0, 255)

gen.add("filter_by_area", bool_t, 0,
	"Filter blobs based on number of pixels",
	True)

gen.add("min_area", int_t, 0,
	"Minimal number of pixels a blob consists of",
	3, 0, 300)

gen.add("max_area", int_t, 0,
	"Maximal number of pixels a blob consists of",
	300, 0, 300)

gen.add("filter_by_circularity", bool_t, 0,
	"Filter blobs based on their circularity",
	True)

gen.add("min_circularity", double_t, 0,
	"Minimal circularity value (0 in case of a line)",
	0.2, 0.0, 1.0)

gen.add("max_circularity", double_t, 0,
	"Maximal circularity value (1 in case of a circle)",
	1.0, 0.0, 1.0)

gen.add("filter_by_inertia", bool_t, 0,
	"Filter blobs based on their inertia ratio",
	True)

gen.add("min_inertia_ratio", double_t, 0,
	"Minimal inertia ratio",
	0.2, 0.0, 1.0)

gen.add("max_inertia_ratio", double_t, 0,
	"Maximal inertia ratio",
	1.0, 0.0, 1.0)

gen.add("filter_by_convexity", bool_t, 0,
	"Filter blobs based on their convexity (Blob area / area of its convex hull)",
	False)

gen.add("min_convexity", double_t, 0,
	"Minimum convexity ratio",
	0.0, 0.0, 1.0)

gen.add("max_convexity", double_t, 0,
	"Maximal convexity ratio",
	1.0, 0.0, 1.0)

gen.add("morph_size", int_t, 0,
	"Size of the structuring element for the closing operation",
	1, 0, 10)

################################################################
#################### Tracking ##################################
gen.add("dt", double_t, 0,
	"Time for one timestep of the kalman filter",
	0.6, 0.1, 3.0)

gen.add("dist_thresh", double_t, 0,
	"Maximum distance between two points to be considered in the assignment problem",
	60.0, 0.0, 150.0)

gen.add("max_allowed_skipped_frames", int_t, 0,
	"Maximum number of frames a object is tracked while it is not seen",
	1, 0, 10)

gen.add("max_trace_length", int_t, 0,
	"Maximum number of Points in a objects trace",
	10, 1, 100)

exit(gen.generate("costmap_converter", "standalone_converter", "CostmapToDynamicObstacles"))
